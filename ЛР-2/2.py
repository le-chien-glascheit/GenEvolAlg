import random

def fitness_func(x):
    # –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏
    # a. –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –∫–æ–¥–∞
    # return x
    # b. –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∫ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    return (x - 2**(5-1))**2
    # c. —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–µ–π
    # return random.randint(0, 10) # –ø—Ä–∏–º–µ—Ä —Å–ª—É—á–∞–π–Ω–æ–π –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏

def hill_climbing_search(L, N):
    i = 0
    maxS = random.randint(0, 2**L-1) # —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –Ω–∞—á–∞–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    max_fitness = fitness_func(maxS)
    
    while i < N:
        print(f"–®–∞–≥ {i}:")
        print(f"–¢–µ–∫—É—â–∏–π maxS: {maxS}")
        print(f"–¢–µ–∫—É—â–∞—è –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å max: {max_fitness}")
        
        omega_maxS = []
        for j in range(-1, 2): # –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—å maxS
            neighbor = maxS ^ (1 << j)
            if 0 <= neighbor < 2**L:
                omega_maxS.append(neighbor)
        
        if len(omega_maxS) > 0:
            si = random.choice(omega_maxS)
            print(f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ si: {si}")
            omega_maxS.remove(si)
            
            if fitness_func(si) > max_fitness:
                maxS = si
                max_fitness = fitness_func(si)
                print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–º–µ–Ω–∞ max –∏ maxS")
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ª—É—á—à–µ–≥–æ —Å–æ—Å–µ–¥–∞")
            break
        
        i += 1
    
    print("\n–ò—Å–∫–æ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ:")
    print(f"maxS: {maxS}")
    print(f"–ü—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å max: {max_fitness}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
L = 5
N = 10
hill_climbing_search(L, N)

import random

L = 5
N = 10

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏ –≤—Ç–æ—Ä–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
def fitness(x):
    return (x - 2**(L-1))**2

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏ ùõÄ(ùíéùíÇùíôùë∫)
def create_neighborhood(maxS):
    neighborhood = []
    for i in range(2**L):
        neighborhood.append((i, fitness(i)))
    return neighborhood

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ –ø–æ–∏—Å–∫–∞ –≤ –≥–ª—É–±–∏–Ω—É
def depth_search():
    i = 0
    maxS = random.randint(0, 2**L-1)
    max_val = fitness(maxS)
    neighborhood = create_neighborhood(maxS)

    while i < N:
        print(f"–®–∞–≥ {i+1}: max = {max_val}, maxS = {maxS}, –û–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—å({maxS}): {neighborhood}")

        if not neighborhood:
            break

        si = random.choice(neighborhood)
        neighborhood.remove(si)

        if fitness(si[0]) > max_val:
            maxS = si[0]
            max_val = si[1]
            neighborhood = create_neighborhood(maxS)
            print(f"   –í—ã–±—Ä–∞–Ω–æ –Ω–æ–≤–æ–µ maxS = {maxS}, –Ω–æ–≤—ã–π max = {max_val}")

        i += 1

    print(f"–ò—Å–∫–æ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ: maxS = {maxS}, –µ–≥–æ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç—å max = {max_val}")

# –ó–∞–ø—É—Å–∫ –º–µ—Ç–æ–¥–∞ –ø–æ–∏—Å–∫–∞ –≤ –≥–ª—É–±–∏–Ω—É
depth_search()

